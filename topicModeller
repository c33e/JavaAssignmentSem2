
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

public class topicModeller extends JFrame implements ActionListener{
	
	////////////////////////
	//GUI Attributes
	
	JLabel label1, label2;
	JButton button1, button2, button3, button4, button5, button6;
	JPanel panel1, panel2;
	JFrame frame; 
	JScrollPane scrollpane;
	JTextArea textarea;
	
	////////////////////////
	//File Processing Attributes

	Scanner myScanner, myScanner2;
	File file1 = new File("sunflowers.txt");
    File file2 = new File("wildflowers.txt");
    String fname1 = file1.getName();
	String fname2 = file2.getName();
    //String[] stopwords = {".", ",", "?", "!", "a", "as", "able", "about", "above", "according", "accordingly", "across", "actually", "after", "afterwards", "again", "against", "aint", "all", "allow", "allows", "almost", "alone", "along", "already", "also", "although", "always", "am", "among", "amongst", "an", "and", "another", "any", "anybody", "anyhow", "anyone", "anything", "anyway", "anyways", "anywhere", "apart", "appear", "appreciate", "appropriate", "are", "arent", "around", "as", "aside", "ask", "asking", "associated", "at", "available", "away", "awfully", "be", "became", "because", "become", "becomes", "becoming", "been", "before", "beforehand", "behind", "being", "believe", "below", "beside", "besides", "best", "better", "between", "beyond", "both", "brief", "but", "by", "cmon", "cs", "came", "can", "cant", "cannot", "cant", "cause", "causes", "certain", "certainly", "changes", "clearly", "co", "com", "come", "comes", "concerning", "consequently", "consider", "considering", "contain", "containing", "contains", "corresponding", "could", "couldnt", "course", "currently", "definitely", "described", "despite", "did", "didnt", "different", "do", "does", "doesnt", "doing", "dont", "done", "down", "downwards", "during", "each", "edu", "eg", "eight", "either", "else", "elsewhere", "enough", "entirely", "especially", "et", "etc", "even", "ever", "every", "everybody", "everyone", "everything", "everywhere", "ex", "exactly", "example", "except", "far", "few", "ff", "fifth", "first", "five", "followed", "following", "follows", "for", "former", "formerly", "forth", "four", "from", "further", "furthermore", "get", "gets", "getting", "given", "gives", "go", "goes", "going", "gone", "got", "gotten", "greetings", "had", "hadnt", "happens", "hardly", "has", "hasnt", "have", "havent", "having", "he", "hes", "hello", "help", "hence", "her", "here", "heres", "hereafter", "hereby", "herein", "hereupon", "hers", "herself", "hi", "him", "himself", "his", "hither", "hopefully", "how", "howbeit", "however", "i", "id", "ill", "im", "ive", "ie", "if", "ignored", "immediate", "in", "inasmuch", "inc", "indeed", "indicate", "indicated", "indicates", "inner", "insofar", "instead", "into", "inward", "is", "isnt", "it", "itd", "itll", "its", "its", "itself", "just", "keep", "keeps", "kept", "know", "knows", "known", "last", "lately", "later", "latter", "latterly", "least", "less", "lest", "let", "lets", "like", "liked", "likely", "little", "look", "looking", "looks", "ltd", "mainly", "many", "may", "maybe", "me", "mean", "meanwhile", "merely", "might", "more", "moreover", "most", "mostly", "much", "must", "my", "myself", "name", "namely", "nd", "near", "nearly", "necessary", "need", "needs", "neither", "never", "nevertheless", "new", "next", "nine", "no", "nobody", "non", "none", "noone", "nor", "normally", "not", "nothing", "novel", "now", "nowhere", "obviously", "of", "off", "often", "oh", "ok", "okay", "old", "on", "once", "one", "ones", "only", "onto", "or", "other", "others", "otherwise", "ought", "our", "ours", "ourselves", "out", "outside", "over", "overall", "own", "particular", "particularly", "per", "perhaps", "placed", "please", "plus", "possible", "presumably", "probably", "provides", "que", "quite", "qv", "rather", "rd", "re", "really", "reasonably", "regarding", "regardless", "regards", "relatively", "respectively", "right", "said", "same", "saw", "say", "saying", "says", "second", "secondly", "see", "seeing", "seem", "seemed", "seeming", "seems", "seen", "self", "selves", "sensible", "sent", "serious", "seriously", "seven", "several", "shall", "she", "should", "shouldnt", "since", "six", "so", "some", "somebody", "somehow", "someone", "something", "sometime", "sometimes", "somewhat", "somewhere", "soon", "sorry", "specified", "specify", "specifying", "still", "sub", "such", "sup", "sure", "ts", "take", "taken", "tell", "tends", "th", "than", "thank", "thanks", "thanx", "that", "thats", "thats", "the", "their", "theirs", "them", "themselves", "then", "thence", "there", "theres", "thereafter", "thereby", "therefore", "therein", "theres", "thereupon", "these", "They", "they", "theyd", "theyll", "theyre", "theyve", "think", "third", "this", "thorough", "thoroughly", "those", "though", "three", "through", "throughout", "thru", "thus", "to", "together", "too", "took", "toward", "towards", "tried", "tries", "truly", "try", "trying", "twice", "two", "un", "under", "unfortunately", "unless", "unlikely", "until", "unto", "up", "upon", "us", "use", "used", "useful", "uses", "using", "usually", "value", "various", "very", "via", "viz", "vs", "want", "wants", "was", "wasnt", "way", "we", "wed", "well", "were", "weve", "welcome", "well", "went", "were", "werent", "what", "whats", "whatever", "when", "whence", "whenever", "where", "wheres", "whereafter", "whereas", "whereby", "wherein", "whereupon", "wherever", "whether", "which", "while", "whither", "who", "whos", "whoever", "whole", "whom", "whose", "why", "will", "willing", "wish", "with", "within", "without", "wont", "wonder", "would", "would", "wouldnt", "yes", "yet", "you", "youd", "youll", "youre", "youve", "your", "yours", "yourself", "yourselves", "zero"};
    ArrayList<String> stopwords = new ArrayList<String>();
    ArrayList<String> fileArray1 = new ArrayList<String>();
	ArrayList<String> fileArray2 = new ArrayList<String>();
	Map<String, Integer> words;
	String word;

	
	////////////////////////
	//Constructor 
	
	public topicModeller(String title) {
		
		super(title);
	
		button1 = new JButton("Read in files");
		button2 = new JButton("Remove stopwords");
		button3 = new JButton("Wordcount");
		button4 = new JButton("Common Words");
		button5 = new JButton("top 10");
		button4 = new JButton("add stopword");

		label1 = new JLabel("Topic Modeller");
		label2 = new JLabel("Test");

        scrollpane = new JScrollPane();
        textarea = new JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textarea.setColumns(20);
        textarea.setRows(5);
        scrollpane.setViewportView(textarea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(button1)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(label1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(button2)
                                        .addGap(18, 18, 18)
                                        .addComponent(button3))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(button4)
                                .addGap(18, 18, 18)
                                .addComponent(button5)
                                .addGap(18, 18, 18)
                                .addComponent(button6))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(scrollpane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(label1)
                .addGap(24, 24, 24)
                .addComponent(label2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button1)
                    .addComponent(button2)
                    .addComponent(button3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button4)
                    .addComponent(button5)
                    .addComponent(button6))
                .addGap(31, 31, 31)
                .addComponent(scrollpane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );
		
		/*
		super(title);
		setSize(500,500);
		setLayout(new FlowLayout());
		
	    //panel1 = new JPanel();
		//add(panel1);
		//panel1.setBackground(Color.PINK);
		//panel1.setLayout(new FlowLayout());
		
		//panel2 = new JPanel();
		//add(panel2);
		//panel2.setBackground(Color.PINK);
		//panel2.setLayout(new FlowLayout());
		
		button1 = new JButton("Read in files");
		button1.setToolTipText("This button reads in files.");
		button1.addActionListener(this);
		
		button2 = new JButton("Remove stopwords");
		button2.setToolTipText("This button removes any stopwords from the file.");
		button2.addActionListener(this);
		
		button3 = new JButton("Wordcount");
		button3.setToolTipText("This picks up a wordcount from the files.");
		button3.addActionListener(this);
		
		button4 = new JButton("Common Words");
		button4.setToolTipText("This dictates common words in the files");
		button4.addActionListener(this);
		
		button5 = new JButton("Top 10");
		button5.setToolTipText("This displays the top 10 words in each file");
		button5.addActionListener(this);
		
		button6 = new JButton("Add a stopword");
		button6.setToolTipText("Stopword");
		button6.addActionListener(this);
		
		panel1 = new JPanel(new FlowLayout());
		//panel1.setLayout(new FlowLayout());
		add(panel1);
        panel1.add(button1);	
        panel1.add(button2);	
        panel1.add(button3);
        
        panel2 = new JPanel(new FlowLayout());
        //panel2.setLayout(new FlowLayout());
        add(panel2);
        panel1.add(button4);	
        panel1.add(button5);	
        panel1.add(button6);
		
        setVisible(true);
	
		*/

		
	}

	///////////////////////
	//Opens the files and converts to arraylists
	
	public void openFile() {
	
		//try catch for error handling when the file for whatever reason cannot open
		try
		{
			myScanner = new Scanner(file1);//scanners created
			myScanner2 = new Scanner(file2);
	    
			while (myScanner.hasNextLine())//each word is added to an arraylist
			{
				fileArray1.add(myScanner.next());
			}
           
			while (myScanner2.hasNextLine())
			{
				fileArray2.add(myScanner2.next());
			}
	   
		}
		catch(FileNotFoundException er)//in case of error print this
		{
			System.out.println("An error has occured: " + er.getMessage());
		}
		//JOptionPane.showMessageDialog( this, "Files :" + fname1, fname2 + "have been read.");
	
	}
	
	//remove stopwords from the file
	public void cleanFile() {
		
		Collections.addAll(stopwords, ".", ",", "?", "!", "a", "as", "able", "about", "above", "according", "accordingly", "across", "actually", "after", "afterwards", "again", "against", "aint", "all", "allow", "allows", "almost", "alone", "along", "already", "also", "although", "always", "am", "among", "amongst", "an", "and", "another", "any", "anybody", "anyhow", "anyone", "anything", "anyway", "anyways", "anywhere", "apart", "appear", "appreciate", "appropriate", "are", "arent", "around", "as", "aside", "ask", "asking", "associated", "at", "available", "away", "awfully", "be", "became", "because", "become", "becomes", "becoming", "been", "before", "beforehand", "behind", "being", "believe", "below", "beside", "besides", "best", "better", "between", "beyond", "both", "brief", "but", "by", "cmon", "cs", "came", "can", "cant", "cannot", "cant", "cause", "causes", "certain", "certainly", "changes", "clearly", "co", "com", "come", "comes", "concerning", "consequently", "consider", "considering", "contain", "containing", "contains", "corresponding", "could", "couldnt", "course", "currently", "definitely", "described", "despite", "did", "didnt", "different", "do", "does", "doesnt", "doing", "dont", "done", "down", "downwards", "during", "each", "edu", "eg", "eight", "either", "else", "elsewhere", "enough", "entirely", "especially", "et", "etc", "even", "ever", "every", "everybody", "everyone", "everything", "everywhere", "ex", "exactly", "example", "except", "far", "few", "ff", "fifth", "first", "five", "followed", "following", "follows", "for", "former", "formerly", "forth", "four", "from", "further", "furthermore", "get", "gets", "getting", "given", "gives", "go", "goes", "going", "gone", "got", "gotten", "greetings", "had", "hadnt", "happens", "hardly", "has", "hasnt", "have", "havent", "having", "he", "hes", "hello", "help", "hence", "her", "here", "heres", "hereafter", "hereby", "herein", "hereupon", "hers", "herself", "hi", "him", "himself", "his", "hither", "hopefully", "how", "howbeit", "however", "i", "id", "ill", "im", "ive", "ie", "if", "ignored", "immediate", "in", "inasmuch", "inc", "indeed", "indicate", "indicated", "indicates", "inner", "insofar", "instead", "into", "inward", "is", "isnt", "it", "itd", "itll", "its", "its", "itself", "just", "keep", "keeps", "kept", "know", "knows", "known", "last", "lately", "later", "latter", "latterly", "least", "less", "lest", "let", "lets", "like", "liked", "likely", "little", "look", "looking", "looks", "ltd", "mainly", "many", "may", "maybe", "me", "mean", "meanwhile", "merely", "might", "more", "moreover", "most", "mostly", "much", "must", "my", "myself", "name", "namely", "nd", "near", "nearly", "necessary", "need", "needs", "neither", "never", "nevertheless", "new", "next", "nine", "no", "nobody", "non", "none", "noone", "nor", "normally", "not", "nothing", "novel", "now", "nowhere", "obviously", "of", "off", "often", "oh", "ok", "okay", "old", "on", "once", "one", "ones", "only", "onto", "or", "other", "others", "otherwise", "ought", "our", "ours", "ourselves", "out", "outside", "over", "overall", "own", "particular", "particularly", "per", "perhaps", "placed", "please", "plus", "possible", "presumably", "probably", "provides", "que", "quite", "qv", "rather", "rd", "re", "really", "reasonably", "regarding", "regardless", "regards", "relatively", "respectively", "right", "said", "same", "saw", "say", "saying", "says", "second", "secondly", "see", "seeing", "seem", "seemed", "seeming", "seems", "seen", "self", "selves", "sensible", "sent", "serious", "seriously", "seven", "several", "shall", "she", "should", "shouldnt", "since", "six", "so", "some", "somebody", "somehow", "someone", "something", "sometime", "sometimes", "somewhat", "somewhere", "soon", "sorry", "specified", "specify", "specifying", "still", "sub", "such", "sup", "sure", "ts", "take", "taken", "tell", "tends", "th", "than", "thank", "thanks", "thanx", "that", "thats", "thats", "the", "their", "theirs", "them", "themselves", "then", "thence", "there", "theres", "thereafter", "thereby", "therefore", "therein", "theres", "thereupon", "these", "They", "they", "theyd", "theyll", "theyre", "theyve", "think", "third", "this", "thorough", "thoroughly", "those", "though", "three", "through", "throughout", "thru", "thus", "to", "together", "too", "took", "toward", "towards", "tried", "tries", "truly", "try", "trying", "twice", "two", "un", "under", "unfortunately", "unless", "unlikely", "until", "unto", "up", "upon", "us", "use", "used", "useful", "uses", "using", "usually", "value", "various", "very", "via", "viz", "vs", "want", "wants", "was", "wasnt", "way", "we", "wed", "well", "were", "weve", "welcome", "well", "went", "were", "werent", "what", "whats", "whatever", "when", "whence", "whenever", "where", "wheres", "whereafter", "whereas", "whereby", "wherein", "whereupon", "wherever", "whether", "which", "while", "whither", "who", "whos", "whoever", "whole", "whom", "whose", "why", "will", "willing", "wish", "with", "within", "without", "wont", "wonder", "would", "would", "wouldnt", "yes", "yet", "you", "youd", "youll", "youre", "youve", "your", "yours", "yourself", "yourselves", "zero");
		
		//fileArray1.removeAll(stopwords);
		//fileArray2.removeAll(stopwords);
		
		for (int i = 0; i < fileArray1.size(); i++) //removes the stopwords contained in the arraylist
		{
			// get the item as string
			
			for (int j = 0; j < stopwords.size(); j++) {
				if ((stopwords.get(j)).contains(fileArray1.get(i))) {
					fileArray1.remove(i);
				}
			}          
		}
  
		//remove stop words here from the temp list
		for (int i = 0; i < fileArray2.size(); i++) 
		{
			// get the item as string
			for (int j = 0; j < stopwords.size(); j++) {
				if ((stopwords.get(j)).contains(fileArray2.get(i))) {
					fileArray2.remove(i);
				}
			}
		}
		
		JOptionPane.showMessageDialog(this, "Cleaned first file \n" + fileArray1 + "\n" + "Cleaned second file \n" + fileArray2);
	}
	
	public void addstopword() 
	{
		
		String input = JOptionPane.showInputDialog(
                null, "What word would you like to add to the stopwords list?");
		//System.out.println(input);
		stopwords.add(input);
		
		fileArray1.removeAll(stopwords);
		fileArray2.removeAll(stopwords);
		
		JOptionPane.showMessageDialog(this, "Cleaned first file \n" + fileArray1 + "\n" + "Cleaned second file \n" + fileArray2);
		
	}

	//finds common elements in the arraylists
	public void readFile() {
	
		while(myScanner.hasNextLine())
		{
			String contains = myScanner.next();
			Integer count = words.get(contains);
			if (word.equals(contains)) {
				//System.out.println("Word is in the file");
				JOptionPane.showMessageDialog(this, "Word is in the file!");
			}
		
			fileArray1.add(myScanner.next());
       
			if (count != null) {
				count++;
			}
			else
				// default if word appears just one time
				count = 1;
			words.put(word, count);
		}
		//System.out.println("Wordcount is " + count);
		myScanner.close();
	
	}

	//compares the lists for any similarities
	public void compareFiles() {
	
		ArrayList<String> fileArray1Copy = new ArrayList<String>(fileArray1);
		fileArray1Copy.retainAll(fileArray2);
	
		Set<String> set = new LinkedHashSet<>();
    
		// Add the elements to set
		set.addAll(fileArray1Copy);

		// Clear the list
		fileArray1Copy.clear();

		// add the elements of set
		// with no duplicates to the list
		fileArray1Copy.addAll(set);
    
		JOptionPane.showMessageDialog(this, "Common elements :" + fileArray1Copy);
	
	}

	//finds the top 10 words in each list and the combined
	public void top10() {
		Map<String, Long> map1 = fileArray1.stream()
				.collect(Collectors.groupingBy(w -> w, Collectors.counting()));

		List<Map.Entry<String, Long>> result1 = map1.entrySet().stream()
				.sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))
				.limit(10)
				.collect(Collectors.toList());
		JOptionPane.showMessageDialog(this, "The top 10 words and their frequency in the first file are: \n" + result1);
	
		Map<String, Long> map2 = fileArray2.stream()
				.collect(Collectors.groupingBy(w -> w, Collectors.counting()));

		List<Map.Entry<String, Long>> result2 = map2.entrySet().stream()
				.sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))
				.limit(10)
				.collect(Collectors.toList());
		JOptionPane.showMessageDialog(this, "The top 10 words and their frequency in the second file are: \n" + result2);
	
	
		List<String> combinedList = Stream.of(fileArray1, fileArray2)
				.flatMap(x -> x.stream())
				.collect(Collectors.toList());
		//JOptionPane.showMessageDialog(this, "The combined list is: \n" + combinedList);
		Map<String, Long> map3 = combinedList.stream()
				.collect(Collectors.groupingBy(w -> w, Collectors.counting()));

		List<Map.Entry<String, Long>> result3 = map3.entrySet().stream()
				.sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))
				.limit(10)
				.collect(Collectors.toList());
		//System.out.println("The top 10 words and their frequency in the two files combined are: \n" +result3);
		JOptionPane.showMessageDialog(this, "The top 10 words and their frequency in the two files combined are: \n" +result3);

		/*
		result1.sort(null);
		result2.sort(null);
	
		System.out.println(result1);
		System.out.println(result2);
    	int i = 0;
    	int n = 0;
    	int match = 0;
    
    
    	while(i<result1.size() && i<result2.size())
    	{
        	if(result2.contains(result1.get(i)))
        	{
        		match++;
        		JOptionPane.showMessageDialog(this, result1.get(i) + " is in both lists");
            	//System.out.println(result1.get(i) + " is in both lists");
        	}
    	}
    	JOptionPane.showMessageDialog(this, "The percentage of elements that are equal are" + match * 100 / result2.size() );
		 */
	}
	
	//button clicks
	@Override
	public void actionPerformed(ActionEvent e) 
	{
		if (e.getSource()==button1) 
		{
			openFile();
		}
		
		else if(e.getSource()==button2) 
		{
			cleanFile();
		}
	
		else if(e.getSource()==button3) 
		{	
			readFile();
		}
	
		else if(e.getSource()==button4) 
		{
			compareFiles();
		}

		else if(e.getSource()==button5) 
		{
			top10();
		}
		
		else if (e.getSource()==button6)
		{
			addstopword();
		}
	}
}
